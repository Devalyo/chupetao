import discord
from discord.ext.commands import Bot
from pytube import YouTube
from urlgen import *
import asyncio
import os
import re


FFMPEG_OPTIONS = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}
bot = Bot(command_prefix='!', intents=discord.Intents.all())

@bot.event
async def on_ready():
    print(f'{bot.user.name} tuc tuc tuc!')


queue = []
displayQueue = []
@bot.command()
async def play(ctx, *, url):
    voiceChannel = ctx.author.voice.channel
    if not ctx.voice_client:
        await voiceChannel.connect()

    video = YouTube(busca(url))
    if ctx.voice_client.is_playing():

        queue.append(busca(url))
        try:
             displayQueue.append(video.title)
        except:
            asyncio.sleep(3)
            displayQueue.append(video.title)
        
        await ctx.send(f"{tuc()} ‚úî‚úî‚úî {video.title}")
        return

    if not ctx.voice_client.is_playing():
        video = YouTube(busca(url))
        title = re.sub('[\'^%#{\}=!$*?/()\n\."]', '', video.title)
        audio_stream = video.streams.filter(only_audio=True).first()
        file_path = f'audio/{title}.mp4'
        if not os.path.exists(file_path):
            audio_stream.download(output_path='audio', filename=f"{title}.mp4")
        await ctx.send(f"{tuc()} üé∂‚ñ∂ {video.title}")
        ctx.voice_client.play(discord.FFmpegPCMAudio(source=file_path, options=FFMPEG_OPTIONS), after=lambda e: play_next(ctx))

 
def play_next(ctx):

    print("playing next...")
    if len(queue) > 0:
        url = queue.pop(0)
        displayQueue.pop(0)

        video = YouTube(url)
        title = re.sub('[\'^%#{\}=!$*?/()\n\."]', '', video.title)
        audio_stream = video.streams.filter(only_audio=True).first()
        file_path = f'audio/{title}.mp4'

        if not os.path.exists(file_path):
            audio_stream.download(output_path='audio', filename=f"{title}.mp4")
        asyncio.run_coroutine_threadsafe(ctx.send(f"{tuc()} üé∂‚ñ∂ {video.title}"), bot.loop)
        ctx.voice_client.play(discord.FFmpegPCMAudio(source=file_path, options=FFMPEG_OPTIONS), after=lambda e: play_next(ctx))


@bot.command()        
async def skip(ctx):
    if ctx.voice_client:
        ctx.voice_client.stop()


@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
    else:
        await ctx.send(f"{tuc()}???")       


@bot.command()
async def remove(ctx, index):
    numero = int(index)
    if numero > 0 and numero <= len(queue):
        await ctx.send(f"{tuc()} ‚ùå‚ùå‚ùå {displayQueue[numero - 1]}")
        del queue [numero - 1]
        del displayQueue [numero - 1]


@bot.command()
async def fila(ctx):

    if len(displayQueue) < 1:
        await ctx.send(f"{tuc()} üí®")

    message = f"{tuc()}: ```\n"
    for i in range(len(displayQueue)):
        message += f"{i + 1} - {displayQueue[i]}\n"
    await ctx.send(message + '\n```')
          

@bot.event
async def on_message(message):
     if message.author == bot.user:
         await bot.process_commands(message)
         return
     
     text = str(message.content).lower()
     if 'chupetao' not in text:
         await bot.process_commands(message)
         return
        
     if 'video' in text:
        await message.channel.send(get_url())
     else:
         mensagem = tuc(beast=True)
         sent_message = await message.channel.send(mensagem)
         if len(mensagem) > 20:
             await asyncio.sleep(3)
             await sent_message.edit(content=tuc())
         

     await bot.process_commands(message)

beast = False
def tuc(beast=False):
    if  random.randrange(0,100) > 96 and beast:
        noTucs = ["A verdade sempre est√° com a minoria, e a minoria √© sempre mais forte do que a maioria, porque a minoria geralmente √© formada por quem realmente tem opini√£o, enquanto a for√ßa da maioria √© ilus√≥ria, formada pelas gangues que n√£o t√™m opini√£o; e que, portanto, no pr√≥ximo instante (quando √© evidente que a minoria √© a mais forte) assume sua opini√£o‚Ä¶ Enquanto isso, a verdade novamente se reverte para uma nova minoria.", "Existir significa 'escolher', mas isso n√£o representa a riqueza, mas a mis√©ria do homem. Sua liberdade de escolha n√£o √© sua grandeza, mas seu drama permanente. De fato, ele sempre se depara com a alternativa de uma 'possibilidade de sim' e uma 'possibilidade de n√£o', sem possuir qualquer crit√©rio seguro. E tateando no escuro numa posi√ß√£o inst√°vel de indecis√£o permanente.", "N√£o existe p√°tria para quem desespera e, quanto a mim, sei que o mar me precede e me segue, e minha loucura est√° sempre pronta. Aqueles que se amam e s√£o separados podem viver sua dor, mas isso n√£o √© desespero: eles sabem que o amor existe. Eis porque sofro, de olhos secos, este ex√≠lio. Espero ainda. Um dia chega, enfim...", "H√° um inc√™ndio no interior de um teatro. O palha√ßo sobe ao palco para avisar o p√∫blico. Eles pensam que √© uma piada e aplaudem. O palha√ßo repete e √© aplaudido com mais entusiasmo. √â como eu penso que o mundo chegar√° ao seu fim: sendo aplaudido por testemunhas que acreditam que tudo n√£o passa de uma piada", "De repente, estou s√≥ no mundo. Vejo tudo isto do alto de um telhado espiritual. Estou s√≥ no mundo. Ver √© estar distante. Ver claro √© parar. Analisar √© ser estrangeiro. Toda a gente passa sem ro√ßar por mim. Tenho s√≥ ar √† minha volta. Sinto-me t√£o isolado que sinto a dist√¢ncia entre mim e o meu fato.", "De repente, estou s√≥ no mundo. Vejo tudo isto do alto de um telhado espiritual. Estou s√≥ no mundo. Ver √© estar distante. Ver claro √© parar. Analisar √© ser estrangeiro. Toda a gente passa sem ro√ßar por mim. Tenho s√≥ ar √† minha volta. Sinto-me t√£o isolado que sinto a dist√¢ncia entre mim e o meu fato. "]
        beast = True
        return random.choice(noTucs)
    tucs = ('tuc ' * (random.randint(1,20)))
    return tucs


bot.run('')